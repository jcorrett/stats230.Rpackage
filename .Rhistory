library("devtools", lib.loc="~/R/win-library/4.1")
library("roxygen2", lib.loc="~/R/win-library/4.1")
install.packages('profvis')
install.packages('bench')
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
rstudioapi::openProject('mainProject', newSession = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
rstudioapi::openProject('mainProject', newSession = FALSE)
source("matrixvectormultiply")
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
rstudioapi::openProject('mainProject', newSession = FALSE)
source("matrixvectormultiply.R")
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
source("mainProject/mainProject.Rproj")
matrixvectormultiply()
source("matrixvectormultiply.R")
source("R/matrixvectormultiply.R")
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
rstudioapi::openProject('mainProject', newSession = FALSE)
source("R/matrixvectormultiply.R")
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
rstudioapi::openProject('mainProject', newSession = FALSE)
source("R/matrixvectormultiply.R")
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
rstudioapi::openProject('mainProject', newSession = FALSE)
source("R/matrixvectormultiply.R")
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
rstudioapi::openProject('mainProject', newSession = FALSE)
Atest <- matrix(rnorm(36),nrow=6,ncol=6)
Btest <- matrix(rnorm(36),nrow=6,ncol=6)
xtest <- matrix(rnorm(36),nrow=6,ncol=6)
prod <- matrixvectormultiply(Atest,Btest,xtest,TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
library(ggplot2)
source("mainProject/R/matrixvectormultiply.R")
n <- 6
Atest <- matrix(rnorm(n^2),nrow=n,ncol=n)
Btest <- matrix(rnorm(n^2),nrow=n,ncol=n)
xtest <- matrix(rnorm(n^2),nrow=n,ncol=1)
prod1 <- matrixvectormultiply(Atest,Btest,xtest,TRUE)
prod2 <- matrixvectormultiply(Atest,Btest,xtest,FALSE)
error <- norm(prod1-prod2,type="I")
error
nmax <- 10
method1_median <- c()
method2_median <- c()
nvec <- 1:nmax
for (n in nvec) {
A <- matrix(rnorm(n^2),nrow=n,ncol=n)
B <- matrix(rnorm(n^2),nrow=n,ncol=n)
x <- matrix(rnorm(n^2),nrow=n,ncol=1)
lb <- mark(matrixvectormultiply(A,B,x,TRUE),matrixvectormultiply(A,B,x,FALSE),min_time = Inf, min_iterations = 1000)
method1_median[n] <- lb$median[1]
method2_median[n] <- lb$median[2]
}
df <- data.frame(nvec,method1_median,method2_median)
bench_plot <- ggplot(data = df, aes(x=nvec))
bench_plot+geom_point()
bench_plot <- ggplot(data = df)
bench_plot+geom_point()
bench_plot <- ggplot(data = df, mapping = aes(x = nvec, y = method1_median))
bench_plot+geom_point()
A
A[1,1]
A[1:2,1:2]
x
x[1:1]
x[1:]
x[1:2]
x[1:n]
B[1:2,1:2]
B
x[1:n]
t(x[1:n])
x
x[1:n]
t(x[1:n])
matrix(x[1:n])
nmax <- 10
A <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
B <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
x <- matrix(rnorm(nmax^2),nrow=nmax,ncol=1)
method1_median <- c()
method2_median <- c()
nvec <- 1:nmax
for (n in nvec) {
lb <- mark(matrixvectormultiply(A[1:n,1:n],B[1:n,1:n],matrix(x[1:n]),TRUE),matrixvectormultiply(A,B,x,FALSE),min_time = Inf, min_iterations = 1000)
method1_median[n] <- lb$median[1]
method2_median[n] <- lb$median[2]
}
nmax <- 10
A <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
B <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
x <- matrix(rnorm(nmax^2),nrow=nmax,ncol=1)
method1_median <- c()
method2_median <- c()
nvec <- 1:nmax
for (n in nvec) {
lb <- mark(matrixvectormultiply(A[1:n,1:n],B[1:n,1:n],matrix(x[1:n]),TRUE),matrixvectormultiply(A[1:n,1:n],B[1:n,1:n],matrix(x[1:n]),FALSE),min_time = Inf, min_iterations = 1000)
method1_median[n] <- lb$median[1]
method2_median[n] <- lb$median[2]
}
df <- data.frame(nvec,method1_median,method2_median)
bench_plot <- ggplot(data = df, aes(x=nvec))
bench_plot + geom_line(aes(y = method1_median,color = "red"))
bench_plot + geom_line(aes(y = method1_median,color = "red")) + geom_line(aes(y = method2_median,color = "blue"))
bench_plot <- ggplot(data = df, aes(x=nvec))
bench_plot + geom_line(aes(y = method1_median,color = "red")) + geom_line(aes(y = method2_median,color = "blue")) + xlab('n') + ylab('Median Computation Time (s)')
nmax <- 20
A <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
B <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
x <- matrix(rnorm(nmax^2),nrow=nmax,ncol=1)
method1_median <- c()
method2_median <- c()
nvec <- 1:nmax
for (n in nvec) {
lb <- mark(matrixvectormultiply(A[1:n,1:n],B[1:n,1:n],matrix(x[1:n]),TRUE),matrixvectormultiply(A[1:n,1:n],B[1:n,1:n],matrix(x[1:n]),FALSE),min_time = Inf, min_iterations = 1000)
method1_median[n] <- lb$median[1]
method2_median[n] <- lb$median[2]
}
df <- data.frame(nvec,method1_median,method2_median)
bench_plot <- ggplot(data = df, aes(x=nvec))
bench_plot + geom_line(aes(y = method1_median,color = "red")) + geom_line(aes(y = method2_median,color = "blue")) + xlab('n') + ylab('Median Computation Time (s)')
bench_plot <- ggplot(data = df, aes(x=nvec))
bench_plot + geom_line(aes(y = method1_median,color = "red")) + geom_line(aes(y = method2_median,color = "blue")) + xlab('n') + ylab('Median Computation Time (s)')
nmax <- 20
A <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
B <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
x <- matrix(rnorm(nmax^2),nrow=nmax,ncol=1)
method1_median <- c()
method2_median <- c()
nvec <- 1:nmax
for (n in nvec) {
lb <- mark(matrixvectormultiply(A[1:n,1:n],B[1:n,1:n],matrix(x[1:n]),TRUE),matrixvectormultiply(A[1:n,1:n],B[1:n,1:n],matrix(x[1:n]),FALSE))
method1_median[n] <- lb$median[1]
method2_median[n] <- lb$median[2]
}
df <- data.frame(nvec,method1_median,method2_median)
bench_plot <- ggplot(data = df, aes(x=nvec)) + geom_line(aes(y = method1_median,color = "red")) + geom_line(aes(y = method2_median,color = "blue")) + xlab('n') + ylab('Median Computation Time (s)')
bench_plot
bench_plot <- ggplot(data = df, aes(x=nvec)) + geom_line(aes(y = method1_median,color = "smooth")) + geom_line(aes(y = method2_median,color = "smooth")) + xlab('n') + ylab('Median Computation Time (s)')
bench_plot
bench_plot <- ggplot(data = df, aes(x=nvec)) + geom_line(aes(y = method1_median)) + geom_line(aes(y = method2_median)) + xlab('n') + ylab('Median Computation Time (s)')
bench_plot
bench_plot <- ggplot(data = df, aes(x=nvec)) + geom_line(aes(y = method1_median),size=1) + geom_line(aes(y = method2_median),size=1) + xlab('n') + ylab('Median Computation Time (s)')
bench_plot
bench_plot <- ggplot(data = df, aes(x=nvec)) + geom_line(aes(y = method1_median), size=1, color = "red") + geom_line(aes(y = method2_median),size=1) + xlab('n') + ylab('Median Computation Time (s)')
bench_plot
bench_plot <- ggplot(data = df, aes(x=nvec)) + geom_line(aes(y = method1_median), size=1, color = "red") + geom_line(aes(y = method2_median),size=1,color="blue") + xlab('n') + ylab('Median Computation Time (s)')
bench_plot
cols = c("A*(B*x)"="red","(A*B)*x"="blue")
bench_plot <- ggplot(data = df, aes(x=nvec)) + geom_line(aes(y = method1_median,color="A*(B*x)"), size=1) + geom_line(aes(y = method2_median,color="(A*B)*x"),size=1) + labs(x = "n",y = "Median Computation Time (s)",color = "Legend")+ scale_color_manual(values = cols)
bench_plot
cols = c("A*(B*x)"="red","(A*B)*x"="blue")
bench_plot <- ggplot(data = df, aes(x=nvec)) + geom_line(aes(y = method1_median,color="A*(B*x)"), size=1) + geom_line(aes(y = method2_median,color="(A*B)*x"),size=1) + labs(x = "n",y = "Median Computation Time (s)",color = "Legend",title = "Micro Benchmarking Results")+ scale_color_manual(values = cols)
bench_plot
cols = c("A*(B*x)"="red","(A*B)*x"="blue")
bench_plot <- ggplot(data = df, aes(x=nvec)) + geom_line(aes(y = method1_median,color="A*(B*x)"), size=1) + geom_line(aes(y = method2_median,color="(A*B)*x"),size=1) + labs(x = "n",y = "Median Computation Time (s)",color = "Legend",title = "Microbenchmarking Results: Computation Time")+ scale_color_manual(values = cols)
bench_plot
cols = c("A*(B*x)"="red","(A*B)*x"="blue")
bench_plot <- ggplot(data = df, aes(x=nvec)) + geom_line(aes(y = method1_median,color="A*(B*x)"), size=1) + geom_line(aes(y = method2_median,color="(A*B)*x"),size=1) + labs(x = "n",y = "Median Computation Time (s)",color = "Legend",title = "Microbenchmarking Results: Computation Time")+ scale_color_manual(values = cols)+theme(plot.title = element_text(hjust = 0.5))
bench_plot
cols = c("A*(B*x)"="red","(A*B)*x"="blue")
bench_plot <- ggplot(data = df, aes(x=nvec)) + geom_line(aes(y = method1_median,color="A*(B*x)"), size=1) + geom_line(aes(y = method2_median,color="(A*B)*x"),size=1) + labs(x = "n",y = "Median Computation Time (s)",color = "Legend",title = "Microbenchmarking Results: Computation Time")+ scale_color_manual(values = cols)+theme(plot.title = element_text(hjust = 0.5))
bench_plot
install.packages("mainProject")
install.packages("~/mainProject/mainProject.Rproj")
devtools::build()
install.packages(stats230.Rpackage_0.0.0.9000.tar.gz)
install()
devtools::install()
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
library(ggplot2)
library(stats230.Rpackage)
n <- 6
Atest <- matrix(rnorm(n^2),nrow=n,ncol=n)
Btest <- matrix(rnorm(n^2),nrow=n,ncol=n)
xtest <- matrix(rnorm(n^2),nrow=n,ncol=1)
prod1 <- matrixvectormultiply(Atest,Btest,xtest,TRUE)
prod2 <- matrixvectormultiply(Atest,Btest,xtest,FALSE)
error <- norm(prod1-prod2,type="I")
error
n <- 6
Atest <- matrix(rnorm(n^2),nrow=n,ncol=n)
Btest <- matrix(rnorm(n^2),nrow=n,ncol=n)
xtest <- matrix(rnorm(n^2),nrow=n,ncol=1)
prod1 <- matrixvectormultiply(Atest,Btest,xtest,TRUE)
prod2 <- matrixvectormultiply(Atest,Btest,xtest,FALSE)
error <- norm(prod1-prod2,type="I")
error
devtools::build()
devtools::install()
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
library(ggplot2)
library(stats230.Rpackage)
nmax <- 40
A <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
B <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
x <- matrix(rnorm(nmax^2),nrow=nmax,ncol=1)
method1_median <- c()
method2_median <- c()
nvec <- 1:nmax
for (n in nvec) {
lb <- mark(matrixvectormultiply(A[1:n,1:n],B[1:n,1:n],matrix(x[1:n]),TRUE),matrixvectormultiply(A[1:n,1:n],B[1:n,1:n],matrix(x[1:n]),FALSE),min_iter=1000)
method1_median[n] <- lb$median[1]
method2_median[n] <- lb$median[2]
}
nmax <- 40
A <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
B <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
x <- matrix(rnorm(nmax^2),nrow=nmax,ncol=1)
method1_median <- c()
method2_median <- c()
nvec <- 1:nmax
for (n in nvec) {
lb <- mark(matrixvectormultiply(A[1:n,1:n],B[1:n,1:n],matrix(x[1:n]),TRUE),matrixvectormultiply(A[1:n,1:n],B[1:n,1:n],matrix(x[1:n]),FALSE),min_iterations=1000)
method1_median[n] <- lb$median[1]
method2_median[n] <- lb$median[2]
}
df <- data.frame(nvec,method1_median,method2_median)
n <- 100
Atest <- matrix(rnorm(n^2),nrow=n,ncol=n)
Btest <- matrix(rnorm(n^2),nrow=n,ncol=n)
xtest <- matrix(rnorm(n^2),nrow=n,ncol=1)
prod1 <- matrixvectormultiply(Atest,Btest,xtest,TRUE)
prod2 <- matrixvectormultiply(Atest,Btest,xtest,FALSE)
error <- norm(prod1-prod2,type="I")
error
n <- 100
Atest <- matrix(rnorm(n^2),nrow=n,ncol=n)
Btest <- matrix(rnorm(n^2),nrow=n,ncol=n)
xtest <- matrix(rnorm(n^2),nrow=n,ncol=1)
prod1 <- matrixvectormultiply(Atest,Btest,xtest,TRUE)
prod2 <- matrixvectormultiply(Atest,Btest,xtest,FALSE)
error <- norm(prod1-prod2,type="I")
error
n <- 100
Atest <- matrix(rnorm(n^2),nrow=n,ncol=n)
Btest <- matrix(rnorm(n^2),nrow=n,ncol=n)
xtest <- matrix(rnorm(n^2),nrow=n,ncol=1)
prod1 <- matrixvectormultiply(Atest,Btest,xtest,TRUE)
prod2 <- matrixvectormultiply(Atest,Btest,xtest,FALSE)
error <- norm(prod1-prod2,type="I")
error
n <- 10
Atest <- matrix(rnorm(n^2),nrow=n,ncol=n)
Btest <- matrix(rnorm(n^2),nrow=n,ncol=n)
xtest <- matrix(rnorm(n^2),nrow=n,ncol=1)
prod1 <- matrixvectormultiply(Atest,Btest,xtest,TRUE)
prod2 <- matrixvectormultiply(Atest,Btest,xtest,FALSE)
error <- norm(prod1-prod2,type="I")
error
n <- 10
Atest <- matrix(rnorm(n^2),nrow=n,ncol=n)
Btest <- matrix(rnorm(n^2),nrow=n,ncol=n)
xtest <- matrix(rnorm(n^2),nrow=n,ncol=1)
prod1 <- matrixvectormultiply(Atest,Btest,xtest,TRUE)
prod2 <- matrixvectormultiply(Atest,Btest,xtest,FALSE)
error <- norm(prod1-prod2,type="I")
error
remove.packages("stats230.Rpackage", lib="~/R/win-library/4.1")
library(devtools)
install_github("jcorrette/stats230.Rpackage")
install_github("jcorrett/stats230.Rpackage")
remove.packages("stats230.Rpackage", lib="~/R/win-library/4.1")
package?foo
package?stats230.Rpackage
remove.packages("stats230.Rpackage", lib="~/R/win-library/4.1")
usethis::use_vignette("STATS230_John_Corrette_HW_1")
devtools::install_github("jcorrett/stats230.Rpackage")
devtools::install_github("jcorrett/stats230.Rpackage")
require(stats230.Rpackage)
is_available <- require(stats230.Rpackage)
is_available
detach("package:stats230.Rpackage", unload = TRUE)
remove.packages("stats230.Rpackage", lib="~/R/win-library/4.1")
is_available <- require(stats230.Rpackage)
is_available
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
library(ggplot2)
is_available <- require(stats230.Rpackage)
if (is_available) {
library(stats230.Rpackage)
} else {
library(devtools)
install_github("jcorrett/stats230.Rpackage")
}
is_available
~is_available
!is_available
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
library(ggplot2)
is_available <- require(stats230.Rpackage)
if (!is_available) {
library(devtools)
install_github("jcorrett/stats230.Rpackage")
}
library(stats230.Rpackage)
detach("package:stats230.Rpackage", unload = TRUE)
remove.packages("stats230.Rpackage", lib="~/R/win-library/4.1")
knitr::opts_chunk$set(echo = TRUE)
library(profvis)
library(bench)
library(ggplot2)
is_available <- require(stats230.Rpackage)
if (!is_available) {
library(devtools)
install_github("jcorrett/stats230.Rpackage")
}
library(stats230.Rpackage)
tempdir()
knitr::opts_chunk$set(echo = TRUE)
library(bench)
library(ggplot2)
is_available <- require(stats230.Rpackage)
if (!is_available) {
library(devtools)
install_github("jcorrett/stats230.Rpackage")
}
library(stats230.Rpackage)
n <- 10
Atest <- matrix(rnorm(n^2),nrow=n,ncol=n)
Btest <- matrix(rnorm(n^2),nrow=n,ncol=n)
xtest <- matrix(rnorm(n^2),nrow=n,ncol=1)
prod1 <- matrixvectormultiply(Atest,Btest,xtest,TRUE)
prod2 <- matrixvectormultiply(Atest,Btest,xtest,FALSE)
error <- norm(prod1-prod2,type="I")
error
nmax <- 40
A <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
B <- matrix(rnorm(nmax^2),nrow=nmax,ncol=nmax)
x <- matrix(rnorm(nmax^2),nrow=nmax,ncol=1)
method1_median <- c()
method2_median <- c()
nvec <- 1:nmax
for (n in nvec) {
lb <- mark(matrixvectormultiply(A[1:n,1:n],B[1:n,1:n],matrix(x[1:n]),TRUE),matrixvectormultiply(A[1:n,1:n],B[1:n,1:n],matrix(x[1:n]),FALSE))
method1_median[n] <- lb$median[1]
method2_median[n] <- lb$median[2]
}
df <- data.frame(nvec,method1_median,method2_median)
cols = c("A*(B*x)"="red","(A*B)*x"="blue")
bench_plot <- ggplot(data = df, aes(x=nvec)) + geom_line(aes(y = method1_median,color="A*(B*x)"), size=1) + geom_line(aes(y = method2_median,color="(A*B)*x"),size=1) + labs(x = "n",y = "Median Computation Time (s)",color = "Legend",title = "Multiplication Algorithm Computation Time")+ scale_color_manual(values = cols)+theme(plot.title = element_text(hjust = 0.5))
bench_plot
cols = c("A*(B*x)"="red","(A*B)*x"="blue")
bench_plot <- plot(lb) + labs(x = "n",y = "Median Computation Time (s)",color = "Legend",title = "Multiplication Algorithm Computation Time")+ scale_color_manual(values = cols)+theme(plot.title = element_text(hjust = 0.5))
bench_plot
bench_plot <- plot(lb)
bench_plot
lb <- mark(matrixvectormultiply(A,B,x,TRUE),matrixvectormultiply(A,B,x,FALSE))
bench_plot <- plot(lb)
bench_plot
lb <- mark(matrixvectormultiply(A,B,x,TRUE),matrixvectormultiply(A,B,x,FALSE))
bench_plot <- plot(lb) + labs(x = "n",y = "Median Computation Time (s)",color = "Legend",title = "Multiplication Algorithm Computation Time")
bench_plot
lb <- mark(matrixvectormultiply(A,B,x,TRUE),matrixvectormultiply(A,B,x,FALSE))
bench_plot <- plot(lb) + labs(x = "n",y = "Median Computation Time (s)",color = "Legend",title = "Multiplication Algorithm Computation Time")+theme(plot.title = element_text(hjust = 0.5))
bench_plot
lb <- mark(matrixvectormultiply(A,B,x,TRUE),matrixvectormultiply(A,B,x,FALSE))
bench_plot <- plot(lb) + labs(color = "Legend",title = "Multiplication Algorithm Computation Time")+theme(plot.title = element_text(hjust = 0.5))+theme(legend.position = "none")
bench_plot
lb <- mark(matrixvectormultiply(A,B,x,TRUE),matrixvectormultiply(A,B,x,FALSE))
bench_plot <- plot(lb) + labs(color = "Legend",title = "Multiplication Algorithm Computation Time")+theme(plot.title = element_text(hjust = 0.5))+theme(legend.position = "none")+scale_y_discrete(limits=c("Alg1","Alg2"))
bench_plot
lb <- mark(matrixvectormultiply(A,B,x,TRUE),matrixvectormultiply(A,B,x,FALSE))
bench_plot <- plot(lb) + labs(color = "Legend",title = "Multiplication Algorithm Computation Time")+theme(plot.title = element_text(hjust = 0.5))+theme(legend.position = "none")
bench_plot
lb <- mark(matrixvectormultiply(A,B,x,TRUE),matrixvectormultiply(A,B,x,FALSE))
bench_plot <- plot(lb) + labs(color = "Legend",title = "Multiplication Algorithm Computation Time")+theme(plot.title = element_text(hjust = 0.5))+theme(legend.position = "none")+scale_y_discrete(limits=c("Alg1","Alg2"))
bench_plot
lb <- mark(matrixvectormultiply(A,B,x,TRUE),matrixvectormultiply(A,B,x,FALSE))
bench_plot <- plot(lb) + labs(color = "Legend",title = "Multiplication Algorithm Computation Time")+theme(plot.title = element_text(hjust = 0.5))+theme(legend.position = "none")+scale_x_discrete(limits=c("Alg1","Alg2"))
bench_plot
lb <- mark(matrixvectormultiply(A,B,x,TRUE),matrixvectormultiply(A,B,x,FALSE))
bench_plot <- plot(lb) + labs(color = "Legend",title = "Multiplication Algorithm Computation Time")+theme(plot.title = element_text(hjust = 0.5))+theme(legend.position = "none")+scale_x_discrete(limits=c("Alg1","Alg2"))
bench_plot
lb <- mark(matrixvectormultiply(A,B,x,TRUE),matrixvectormultiply(A,B,x,FALSE))
bench_plot <- plot(lb) + labs(color = "Legend",title = "Multiplication Algorithm Computation Time")+theme(plot.title = element_text(hjust = 0.5))+theme(legend.position = "none")
bench_plot
knitr::opts_chunk$set(echo = TRUE)
library(bench)
library(ggplot2)
library(tidyr)
is_available <- require(stats230.Rpackage)
if (!is_available) {
library(devtools)
install_github("jcorrett/stats230.Rpackage")
}
library(stats230.Rpackage)
detach("package:bench", unload = TRUE)
require(bench)
detach("package:profvis", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
detach("package:bench", unload = TRUE)
detach("package:devtools", unload = TRUE)
detach("package:stats230.Rpackage", unload = TRUE)
detach()
detach("package:usethis", unload = TRUE)
remove.packages("stats230.Rpackage", lib="~/R/win-library/4.1")
devtools::install_github("jcorrett/stats230.Rpackage")
remove.packages("stats230.Rpackage", lib="~/R/win-library/4.1")
devtools::install_github("jcorrett/stats230.Rpackage")
