gd_beta_CI <- gd_df[[3]]
nr_df <- nr_logistic_regression(X,y,tol)
nr_beta <- nr_df[[1]]
nr_llhood <- nr_df[[2]]
nr_beta_CI <- nr_df[[3]]
gd_results <- cbind(gd_beta-gd_beta_CI,gd_beta+gd_beta_CI)
nr_results <- cbind(nr_beta-nr_beta_CI,nr_beta+nr_beta_CI)
rownames(gd_results) <- xstr
rownames(nr_results) <- xstr
print("Gradient Descent Beta 95% CI:")
gd_results
print("Newton-Raphson Beta 95% CI:")
nr_results
plot(gd_llhood)
plot(nr_llhood)
lb_GD <- mark(gd_logistic_regression(X,y,alpha,tol))
lb_NR <- mark(nr_logistic_regression(X,y,tol),max_iterations = 1000,min_time = Inf)
alpha <- 1e-3
tol <- 1e-10
gd_df <- gd_logistic_regression(X,y,alpha,tol)
gd_beta <- gd_df[[1]]
gd_llhood <- gd_df[[2]]
gd_beta_CI <- gd_df[[3]]
nr_df <- nr_logistic_regression(X,y,tol)
nr_beta <- nr_df[[1]]
nr_llhood <- nr_df[[2]]
nr_beta_CI <- nr_df[[3]]
gd_results <- cbind(gd_beta-gd_beta_CI,gd_beta+gd_beta_CI)
nr_results <- cbind(nr_beta-nr_beta_CI,nr_beta+nr_beta_CI)
rownames(gd_results) <- xstr
rownames(nr_results) <- xstr
print("Gradient Descent Beta 95% CI:")
gd_results
print("Newton-Raphson Beta 95% CI:")
nr_results
plot(gd_llhood)
plot(nr_llhood)
lb_GD <- mark(gd_logistic_regression(X,y,alpha,tol))
lb_NR <- mark(nr_logistic_regression(X,y,tol))
p1<-autoplot(lb_GD)+theme(legend.position = "none")+ labs(color = "Legend",title = "Logistic Regression Benchmarking")+theme(plot.title = element_text(hjust = 0.5))
p2<-autoplot(lb_NR)+theme(legend.position = "none")
#scale_y_continuous(limits=c(5e-5,2e-4))
gridExtra::grid.arrange(p1,p2,nrow=2)
alpha <- 1e-3
tol <- 1e-10
gd_df <- gd_logistic_regression(X,y,alpha,tol)
gd_beta <- gd_df[[1]]
gd_llhood <- gd_df[[2]]
gd_beta_CI <- gd_df[[3]]
nr_df <- nr_logistic_regression(X,y,tol)
nr_beta <- nr_df[[1]]
nr_llhood <- nr_df[[2]]
nr_beta_CI <- nr_df[[3]]
gd_results <- cbind(gd_beta-gd_beta_CI,gd_beta+gd_beta_CI)
nr_results <- cbind(nr_beta-nr_beta_CI,nr_beta+nr_beta_CI)
rownames(gd_results) <- xstr
rownames(nr_results) <- xstr
print("Gradient Descent Beta 95% CI:")
gd_results
print("Newton-Raphson Beta 95% CI:")
nr_results
plot(gd_llhood)
plot(nr_llhood)
lb_GD <- mark(gd_logistic_regression(X,y,alpha,tol),max_iterations = 100,min_time = Inf)
lb_NR <- mark(nr_logistic_regression(X,y,tol),max_iterations = 100,min_time = Inf)
p1<-autoplot(lb_GD)+theme(legend.position = "none")+ labs(color = "Legend",title = "Logistic Regression Benchmarking")+theme(plot.title = element_text(hjust = 0.5))
p2<-autoplot(lb_NR)+theme(legend.position = "none")
#scale_y_continuous(limits=c(5e-5,2e-4))
gridExtra::grid.arrange(p1,p2,nrow=2)
alpha <- 1e-3
tol <- 1e-10
gd_df <- gd_logistic_regression(X,y,alpha,tol)
gd_beta <- gd_df[[1]]
gd_llhood <- gd_df[[2]]
gd_beta_CI <- gd_df[[3]]
nr_df <- nr_logistic_regression(X,y,tol)
nr_beta <- nr_df[[1]]
nr_llhood <- nr_df[[2]]
nr_beta_CI <- nr_df[[3]]
gd_results <- cbind(gd_beta-gd_beta_CI,gd_beta+gd_beta_CI)
nr_results <- cbind(nr_beta-nr_beta_CI,nr_beta+nr_beta_CI)
rownames(gd_results) <- xstr
rownames(nr_results) <- xstr
print("Gradient Descent Beta 95% CI:")
gd_results
print("Newton-Raphson Beta 95% CI:")
nr_results
plot(gd_llhood)
plot(nr_llhood)
lb_GD <- mark(gd_logistic_regression(X,y,alpha,tol),max_iterations = 100,min_time = Inf)
lb_NR <- mark(nr_logistic_regression(X,y,tol),max_iterations = 100,min_time = Inf)
p1<-autoplot+scale_y_continuous(limits=c(1e-2,0.18))+theme(legend.position = "none")+ labs(color = "Legend",title = "Logistic Regression Benchmarking")+theme(plot.title = element_text(hjust = 0.5))
alpha <- 1e-3
tol <- 1e-10
gd_df <- gd_logistic_regression(X,y,alpha,tol)
gd_beta <- gd_df[[1]]
gd_llhood <- gd_df[[2]]
gd_beta_CI <- gd_df[[3]]
nr_df <- nr_logistic_regression(X,y,tol)
nr_beta <- nr_df[[1]]
nr_llhood <- nr_df[[2]]
nr_beta_CI <- nr_df[[3]]
gd_results <- cbind(gd_beta-gd_beta_CI,gd_beta+gd_beta_CI)
nr_results <- cbind(nr_beta-nr_beta_CI,nr_beta+nr_beta_CI)
rownames(gd_results) <- xstr
rownames(nr_results) <- xstr
print("Gradient Descent Beta 95% CI:")
gd_results
print("Newton-Raphson Beta 95% CI:")
nr_results
plot(gd_llhood)
plot(nr_llhood)
lb_GD <- mark(gd_logistic_regression(X,y,alpha,tol),max_iterations = 100,min_time = Inf)
lb_NR <- mark(nr_logistic_regression(X,y,tol),max_iterations = 100,min_time = Inf)
p1<-autoplot(lb_GD)+scale_y_continuous(limits=c(1e-2,0.18))+theme(legend.position = "none")+ labs(color = "Legend",title = "Logistic Regression Benchmarking")+theme(plot.title = element_text(hjust = 0.5))
p2<-autoplot(lb_NR)+theme(legend.position = "none")+scale_y_continuous(limits=c(1e-2,0.18))
gridExtra::grid.arrange(p1,p2,nrow=2)
temp <- 1:10
temp
tail(temp)
tail(temp,n=1)
tail(temp,n=2)
detach("package:stats230.Rpackage", unload = TRUE)
remove.packages("stats230.Rpackage", lib="~/R/win-library/4.1")
diff(tail(temp,n=2))
log(tail(temp,n=2))
head(X)
head(y)
tol
llhood <- c()
d <- dim(X)
beta <- integer(d[2])
p <- 1/(1+exp(-X%*%beta))
err <- Inf #To ensure we enter the loop
while(err > tol) {
llhood <- c(llhood,t(y) %*% X %*% beta -sum(log(1+exp(X%*%beta))))
gradllhood <- t(X)%*%(1/(1+exp(-X%*%beta)) - y)
M <- t(X)%*%diag(as.vector(p*(1-p)))%*%X
beta <- beta - solve(M,gradllhood)
p <- 1/(1+exp(-X%*%beta))
#err <- norm(-solve(M,gradllhood))
err <- abs(diff(tail(llhood,n=2)))
}
p <- 1/(1+exp(-X%*%beta))
W <- diag(as.vector(p*(1-p)))
CI_bounds <- 1.960*sqrt(diag(inv(t(X)%*%W%*%X)))
nr_beta
llhood <- c()
d <- dim(X)
beta <- integer(d[2])
p <- 1/(1+exp(-X%*%beta))
err <- Inf #To ensure we enter the loop
while(err > tol) {
llhood <- c(llhood,t(y) %*% X %*% beta -sum(log(1+exp(X%*%beta))))
gradllhood <- t(X)%*%(1/(1+exp(-X%*%beta)) - y)
M <- t(X)%*%diag(as.vector(p*(1-p)))%*%X
beta <- beta - solve(M,gradllhood)
p <- 1/(1+exp(-X%*%beta))
if(length(llhood)==1){
err <- norm(-solve(M,gradllhood))
} else {
err <- abs(diff(tail(llhood,n=2)))
}
}
p <- 1/(1+exp(-X%*%beta))
W <- diag(as.vector(p*(1-p)))
CI_bounds <- 1.960*sqrt(diag(inv(t(X)%*%W%*%X)))
beta
err
llhood
llhood <- c()
d <- dim(X)
M <- diag(d[2])
beta <- as.matrix(rnorm(d[2]))
err <- Inf #To ensure we enter the loop
while(err > tol) {
llhood <- c(llhood,t(y) %*% X %*% beta -sum(log(1+exp(X%*%beta))))
gradllhood <- t(X)%*%(1/(1+exp(-X%*%beta)) - y)
beta <- beta - alpha*M%*%gradllhood
if(length(llhood)==1){
err <- norm(- alpha*M%*%gradllhood)
} else {
err <- abs(diff(tail(llhood,n=2)))
}
}
p <- 1/(1+exp(-X%*%beta))
W <- diag(as.vector(p*(1-p)))
CI_bounds <- 1.960*sqrt(diag(inv(t(X)%*%W%*%X)))
beta
llhood
abs(diff(llhood))
knitr::opts_chunk$set(echo = TRUE)
library(bench)
library(ggplot2)
library(tidyr)
library(matlib)
is_available <- require(stats230.Rpackage)
if (!is_available) {
library(devtools)
install_github("jcorrett/stats230.Rpackage")
}
library(stats230.Rpackage)
data <- read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",
sep=",",head=T,row.names=1)
DF <- data.frame(data)
X <- apply(as.matrix.noquote(DF),2,as.numeric)
ystr <- "chd"
xstr <- c("sbp","tobacco","ldl","adiposity","typea","obesity","alcohol","age")
#xstr <- c("ldl","age")
y <- X[, ystr]
X <- X[, xstr]
X <- scale(X) #standardize to have 0 mean columns w/ var = 1
alpha <- 1e-3
tol <- 1e-10
gd_df <- gd_logistic_regression(X,y,alpha,tol)
gd_beta <- gd_df[[1]]
gd_llhood <- gd_df[[2]]
gd_beta_CI <- gd_df[[3]]
nr_df <- nr_logistic_regression(X,y,tol)
nr_beta <- nr_df[[1]]
nr_llhood <- nr_df[[2]]
nr_beta_CI <- nr_df[[3]]
gd_results <- cbind(gd_beta-gd_beta_CI,gd_beta+gd_beta_CI)
nr_results <- cbind(nr_beta-nr_beta_CI,nr_beta+nr_beta_CI)
rownames(gd_results) <- xstr
rownames(nr_results) <- xstr
print("Gradient Descent Beta 95% CI:")
gd_results
print("Newton-Raphson Beta 95% CI:")
nr_results
plot(gd_llhood)
plot(nr_llhood)
lb_GD <- mark(gd_logistic_regression(X,y,alpha,tol),max_iterations = 100,min_time = Inf)
lb_NR <- mark(nr_logistic_regression(X,y,tol),max_iterations = 100,min_time = Inf)
p1<-autoplot(lb_GD)+scale_y_continuous(limits=c(1e-2,0.18))+theme(legend.position = "none")+ labs(color = "Legend",title = "Logistic Regression Benchmarking")+theme(plot.title = element_text(hjust = 0.5))
p2<-autoplot(lb_NR)+theme(legend.position = "none")+scale_y_continuous(limits=c(1e-2,0.18))
gridExtra::grid.arrange(p1,p2,nrow=2)
ggplot(gd_llhood)
plot(gd_llhood,type = "l")
plot(nr_llhood,type = "l")
plot(gd_llhood,type = "b")
plot(nr_llhood,type = "b")
plot(gd_llhood,type = "b")
xlab("Iteration")
plot(nr_llhood,type = "b")
plot(gd_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Gradient Descent")
plot(nr_llhood,type = "b")
plot(gd_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Gradient Descent",ylim = c(-510,-270))
plot(nr_llhood,type = "b")
plot(gd_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Gradient Descent",ylim = c(-510,-270))
plot(nr_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Newton-Raphson",ylim = c(-510,-270))
plot(gd_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Gradient Descent",xlim = c(1,length(gd_llhood)),ylim = c(-510,-270))
plot(nr_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Newton-Raphson",c(1,length(nr_llhood)),ylim = c(-510,-270))
plot(gd_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Gradient Descent",xlim = c(1,length(gd_llhood)),ylim = c(-510,-270))
plot(nr_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Newton-Raphson",xlim=c(1,length(nr_llhood)),ylim = c(-510,-270))
alpha <- 1e-3
tol <- 1e-10
gd_df <- gd_logistic_regression(X,y,alpha,tol)
gd_beta <- gd_df[[1]]
gd_llhood <- gd_df[[2]]
gd_beta_CI <- gd_df[[3]]
nr_df <- nr_logistic_regression(X,y,tol)
nr_beta <- nr_df[[1]]
nr_llhood <- nr_df[[2]]
nr_beta_CI <- nr_df[[3]]
gd_results <- cbind(gd_beta-gd_beta_CI,gd_beta+gd_beta_CI)
nr_results <- cbind(nr_beta-nr_beta_CI,nr_beta+nr_beta_CI)
rownames(gd_results) <- xstr
rownames(nr_results) <- xstr
print("Gradient Descent Beta 95% CI:")
gd_results
print("Newton-Raphson Beta 95% CI:")
nr_results
plot(gd_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Gradient Descent",xlim = c(1,length(gd_llhood)),ylim = c(-510,-270))
plot(nr_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Newton-Raphson",xlim=c(1,length(nr_llhood)),ylim = c(-510,-270))
alpha <- 1e-3
tol <- 1e-10
gd_df <- gd_logistic_regression(X,y,alpha,tol)
gd_beta <- gd_df[[1]]
gd_llhood <- gd_df[[2]]
gd_beta_CI <- gd_df[[3]]
nr_df <- nr_logistic_regression(X,y,tol)
nr_beta <- nr_df[[1]]
nr_llhood <- nr_df[[2]]
nr_beta_CI <- nr_df[[3]]
gd_results <- cbind(gd_beta-gd_beta_CI,gd_beta+gd_beta_CI)
nr_results <- cbind(nr_beta-nr_beta_CI,nr_beta+nr_beta_CI)
rownames(gd_results) <- xstr
rownames(nr_results) <- xstr
print("Gradient Descent Beta 95% CI:")
gd_results
print("Newton-Raphson Beta 95% CI:")
nr_results
plot(gd_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Gradient Descent",xlim = c(1,length(gd_llhood)),ylim = c(-510,-270))
plot(nr_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Newton-Raphson",xlim=c(1,length(nr_llhood)),ylim = c(-510,-270))
lb_GD <- mark(gd_logistic_regression(X,y,alpha,tol),max_iterations = 100,min_time = Inf)
lb_NR <- mark(nr_logistic_regression(X,y,tol),max_iterations = 100,min_time = Inf)
p1<-autoplot(lb_GD)+scale_y_continuous(limits=c(1e-2,0.18))+theme(legend.position = "none")+ labs(color = "Legend",title = "Logistic Regression Benchmarking")+theme(plot.title = element_text(hjust = 0.5))
p2<-autoplot(lb_NR)+theme(legend.position = "none")+scale_y_continuous(limits=c(1e-2,0.18))
gridExtra::grid.arrange(p1,p2,nrow=2)
lb_GD <- mark(gd_logistic_regression(X,y,alpha,tol),max_iterations = 100,min_time = Inf)
lb_NR <- mark(nr_logistic_regression(X,y,tol),max_iterations = 100,min_time = Inf)
p1<-autoplot(lb_GD)+theme(legend.position = "none")+ labs(color = "Legend",title = "Logistic Regression Benchmarking")+theme(plot.title = element_text(hjust = 0.5))
p2<-autoplot(lb_NR)+theme(legend.position = "none")
gridExtra::grid.arrange(p1,p2,nrow=2)
p <- c(0.1,0.3,0.6) #(pA,pB,pO)
n <- c(6,55,4,35) #(nA,nB,nAB,nO)
tol <- 1e-16
blood_data <- em_blood(n,p,tol)
blood_data[[1]] #(pA,pB,pO)
blood_data[[2]] #(pAA,pAO,pBB,pBO,pAB,pOO)
p <- c(0.1,0.3,0.6) #(pA,pB,pO)
n <- c(6,55,4,35) #(nA,nB,nAB,nO)
tol <- 1e-16
blood_data <- em_blood(n,p,tol)
blood_data[[1]] #(pA,pB,pO)
p <- c(0.01,0.03,0.96) #(pA,pB,pO)
n <- c(6,55,4,35) #(nA,nB,nAB,nO)
tol <- 1e-16
blood_data <- em_blood(n,p,tol)
blood_data[[1]] #(pA,pB,pO)
p <- c(0.01,0.03,0.96) #(pA,pB,pO)
n <- c(6,55,4,35) #(nA,nB,nAB,nO)
tol <- 1e-16
blood_data <- em_blood(n,p,tol)
blood_data[[1]] #(pA,pB,pO)
sample(c(1,2,3))
sample(c(1,2,3))
sample(c(1,2,3))
sample(c(1,2,3))
sample(c(1,2,3))
sample(c(1,2,3))
eps <- runif(2)
eps
eps <- c(eps[1]*eps[2],(1-eps[1])*eps[2],1-eps[2])
eps
sum(eps)
sample(eps)
sample(eps)
sample(eps)
sample(eps)
sample(eps)
eps <- runif(2)
eps <- c(eps[1]*eps[2],(1-eps[1])*eps[2],1-eps[2])
p <- sample(eps) #(pA,pB,pO)
n <- c(6,55,4,35) #(nA,nB,nAB,nO)
tol <- 1e-16
blood_data <- em_blood(n,p,tol)
blood_data[[1]] #(pA,pB,pO)
eps <- runif(2)
eps <- c(eps[1]*eps[2],(1-eps[1])*eps[2],1-eps[2])
p <- sample(eps) #(pA,pB,pO)
n <- c(6,55,4,35) #(nA,nB,nAB,nO)
tol <- 1e-16
blood_data <- em_blood(n,p,tol)
blood_data[[1]] #(pA,pB,pO)
eps <- runif(2)
eps <- c(eps[1]*eps[2],(1-eps[1])*eps[2],1-eps[2])
p <- sample(eps) #(pA,pB,pO)
n <- c(6,55,4,35) #(nA,nB,nAB,nO)
tol <- 1e-16
blood_data <- em_blood(n,p,tol)
blood_data[[1]] #(pA,pB,pO)
eps <- runif(2)
eps <- c(eps[1]*eps[2],(1-eps[1])*eps[2],1-eps[2])
p <- sample(eps) #(pA,pB,pO)
n <- c(6,55,4,35) #(nA,nB,nAB,nO)
tol <- 1e-16
blood_data <- em_blood(n,p,tol)
blood_data[[1]] #(pA,pB,pO)
eps <- runif(2)
eps <- c(eps[1]*eps[2],(1-eps[1])*eps[2],1-eps[2])
p <- sample(eps) #(pA,pB,pO)
n <- c(6,55,4,35) #(nA,nB,nAB,nO)
tol <- 1e-16
blood_data <- em_blood(n,p,tol)
blood_data[[1]] #(pA,pB,pO)
set.seed(1000)#set fixed seed for curated example
P <- rbind(c(0.98,0.02),c(0.05,0.95))
E <- rbind(c(1/6,1/6,1/6,1/6,1/6,1/6),
c(1/10,1/10,1/2,1/10,1/10,1/10))
v <- c(1/2,1/2)
sim_data <- sim_HMM(P,E,v,100)
x <- sim_data[[1]]
y <- sim_data[[2]]
plot(x)
plot(y)
set.seed(1000)#set fixed seed for curated example
P <- rbind(c(0.98,0.02),c(0.05,0.95))
E <- rbind(c(1/6,1/6,1/6,1/6,1/6,1/6),
c(1/10,1/10,1/2,1/10,1/10,1/10))
v <- c(1/2,1/2)
sim_data <- sim_HMM(P,E,v,100)
x <- sim_data[[1]]
y <- sim_data[[2]]
plot(x)
plot(y)
p1<-plot(gd_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Gradient Descent",xlim = c(1,length(gd_llhood)),ylim = c(-510,-270))
p2<-plot(nr_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Newton-Raphson",xlim=c(1,length(nr_llhood)),ylim = c(-510,-270))
gridExtra::grid.arrange(p1,p2,nrow=2)
set.seed(1000)#set fixed seed for curated example
P <- rbind(c(0.98,0.02),c(0.05,0.95))
E <- rbind(c(1/6,1/6,1/6,1/6,1/6,1/6),
c(1/10,1/10,1/2,1/10,1/10,1/10))
v <- c(1/2,1/2)
sim_data <- sim_HMM(P,E,v,100)
x <- sim_data[[1]]
y <- sim_data[[2]]
plot(x,xlab = "t",ylab = "Hidden State",title = "HMM Hidden States")
plot(y,xlab = "t",ylab = "Observed State",title = "HMM Observed States")
set.seed(1000)#set fixed seed for curated example
P <- rbind(c(0.98,0.02),c(0.05,0.95))
E <- rbind(c(1/6,1/6,1/6,1/6,1/6,1/6),
c(1/10,1/10,1/2,1/10,1/10,1/10))
v <- c(1/2,1/2)
sim_data <- sim_HMM(P,E,v,100)
x <- sim_data[[1]]
y <- sim_data[[2]]
plot(x,xlab = "t",ylab = "Hidden State",main = "HMM Hidden States")
plot(y,xlab = "t",ylab = "Observed State",main = "HMM Observed States")
plot(gd_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",title = "Gradient Descent",xlim = c(1,length(gd_llhood)),ylim = c(-510,-270))
plot(nr_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",main = "Newton-Raphson",xlim=c(1,length(nr_llhood)),ylim = c(-510,-270))
plot(gd_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",main = "Gradient Descent",xlim = c(1,length(gd_llhood)),ylim = c(-510,-270))
plot(nr_llhood,type = "b",xlab = "Iteration",ylab = "Log Likelihood",main = "Newton-Raphson",xlim=c(1,length(nr_llhood)),ylim = c(-510,-270))
lb_GD <- mark(gd_logistic_regression(X,y,alpha,tol),max_iterations = 100,min_time = Inf)
f_data <- forward_HMM(P,E,v,y,length(v))
b_data <- backward_HMM(P,E,v,y,length(v))
a <- f_data[[2]]
b <- b_data[[2]]
p_x <- a*b/colSums(a*b,2)
plot(x-1,col="black")
lines(p_x[1,],type = "l",col="blue")
lines(p_x[2,],type = "l",col = "red")
f_data <- forward_HMM(P,E,v,y,length(v))
b_data <- backward_HMM(P,E,v,y,length(v))
a <- f_data[[2]]
b <- b_data[[2]]
p_x <- a*b/colSums(a*b,2)
plot(x-1,col="black",xlab = "t",ylab = "Hidden State",main = "HMM Marginal Probabilities")
lines(p_x[1,],type = "l",col="blue")
lines(p_x[2,],type = "l",col = "red")
set.seed(1000)#set fixed seed for curated example
P <- rbind(c(0.98,0.02),c(0.05,0.95))
E <- rbind(c(1/6,1/6,1/6,1/6,1/6,1/6),
c(1/10,1/10,1/2,1/10,1/10,1/10))
v <- c(1/2,1/2)
sim_data <- sim_HMM(P,E,v,100)
x <- sim_data[[1]]
y <- sim_data[[2]]
plot(x-1,xlab = "t",ylab = "Hidden State",main = "HMM Hidden States")
plot(y,xlab = "t",ylab = "Observed State",main = "HMM Observed States")
set.seed(1000)#set fixed seed for curated example
P <- rbind(c(0.98,0.02),c(0.05,0.95))
E <- rbind(c(1/6,1/6,1/6,1/6,1/6,1/6),
c(1/10,1/10,1/2,1/10,1/10,1/10))
v <- c(1/2,1/2)
sim_data <- sim_HMM(P,E,v,100)
x <- sim_data[[1]]
y <- sim_data[[2]]
plot(x-1,xlab = "t",ylab = "Hidden State",main = "HMM Hidden States")
plot(y,xlab = "t",ylab = "Observed State",main = "HMM Observed States")
f_data <- forward_HMM(P,E,v,y,length(v))
b_data <- backward_HMM(P,E,v,y,length(v))
a <- f_data[[2]]
b <- b_data[[2]]
p_x <- a*b/colSums(a*b,2)
plot(x-1,col="black",xlab = "t",ylab = "Hidden State",main = "HMM Marginal Probabilities")
lines(p_x[1,],type = "l",col="blue")
lines(p_x[2,],type = "l",col = "red")
eps <- 0.1*runif(2)
P_guess <- rbind(c(1-eps[1],eps[1]),c(eps[2],1-eps[2]))
E_guess <- matrix(1/6,nrow=2,ncol=6)
v_guess <- c(0.5,0.5)
bw_data <- bw_HMM(P_guess,E_guess,v_guess,y,2,6,1e-14)
P_est <- bw_data[[1]]
E_est <- bw_data[[2]]
v_est <- bw_data[[3]]
P_est
E_est
v_est
eps <- 0.1*runif(2)
P_guess <- rbind(c(1-eps[1],eps[1]),c(eps[2],1-eps[2]))
E_guess <- matrix(1/6,nrow=2,ncol=6)
v_guess <- c(0.5,0.5)
bw_data <- bw_HMM(P_guess,E_guess,v_guess,y,2,6,1e-14)
P_est <- bw_data[[1]]
E_est <- bw_data[[2]]
v_est <- bw_data[[3]]
P_est
E_est
v_est
P_guess <- P
E_guess <- E
v_guess <- v
bw_data <- bw_HMM(P_guess,E_guess,v_guess,y,2,6,1e-14)
P_est <- bw_data[[1]]
E_est <- bw_data[[2]]
v_est <- bw_data[[3]]
P_est
E_est
v_est
P_guess <- P
E_guess <- E
v_guess <- v
bw_data <- bw_HMM(P_guess,E_guess,v_guess,y,2,6,1e-14)
P_est <- bw_data[[1]]
E_est <- bw_data[[2]]
v_est <- bw_data[[3]]
P_est
E_est
v_est
70/3
